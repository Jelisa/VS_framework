"""
A script to analyze how many compounds and variants have passed through the different steps of the process.
author: jelisa
email: jelisa.iglesias@gmail.com
"""

from argparse import ArgumentDefaultsHelpFormatter, ArgumentParser
import pybel as py
import re
import csv
import os
import sys

def find_sim_id(line_text):
    """
    Look in the line for the simulation ID
    :param line_text:  a line containing the a failing system and coming from
                       a report file generated by the sims_review.py script
    :return: The ID of the simulation according to a specific patterns or False if the line
            doesn't match the patterns.
    """
    pattern = re.search(r'\+ [a-zA-Z]+_(\d+){0}\w+.log'.format(os.sep), line_text)
    if pattern is None:
        if os.sep in line_text:
            idt = line_text.split(os.sep)[0].split()[-1]
        else:
            idt = False
    else:
        idt = pattern.group(1)
    return idt

parser = ArgumentParser(formatter_class=ArgumentDefaultsHelpFormatter)
parser.add_argument('-actives_file', required=True)
parser.add_argument("-inactives_file", required=True)
parser.add_argument("-glide_ranking", required=True)
parser.add_argument("-simulations_report", required=True)
args = parser.parse_args()

format_actives_file = args.actives_file.split('.')[-1]
total_actives_variants = [mol.title for mol in py.readfile(format_actives_file, args.actives_file)]
total_actives_compounds = list(set(total_actives_variants))

format_inactives_file = args.inactives_file.split('.')[-1]
total_inactives_variants = [mol.title for mol in py.readfile(format_inactives_file, args.inactives_file)]
total_inactives_compounds = list(set(total_inactives_variants))

total_compounds = float(len(total_actives_compounds) + len(total_inactives_compounds))
total_variants = float(len(total_actives_variants) + len(total_inactives_variants))

total_percentage_active_compounds = len(total_actives_compounds) / total_compounds
total_percentage_active_variants = len(total_actives_variants) / total_variants


sim_name_dictio = {}
with open(args.glide_ranking) as infile:
    csv_parser = csv.DictReader(infile, delimiter=",")
    for n, row in enumerate(csv_parser):
        sim_name_dictio[str(n)] = row['Title']

after_glide_variants = list(sim_name_dictio.values())
after_glide_actives_variants = [comp for comp in after_glide_variants if comp in total_actives_compounds]
after_glide_inactives_variants = [comp for comp in after_glide_variants if comp in total_inactives_compounds]

after_glide_percentage_active_variants = len(after_glide_actives_variants) / float(len(after_glide_variants))

after_glide_compounds = list(set(sim_name_dictio.values()))
after_glide_actives_compounds = [comp for comp in after_glide_compounds if comp in total_actives_compounds]
after_glide_inactives_compounds = [comp for comp in after_glide_compounds if comp in total_inactives_compounds]

after_glide_percentage_active_compounds = len(after_glide_actives_compounds) / float(len(after_glide_compounds))

with open(args.simulations_report) as infile:
    text = infile.read()
last_sim = re.search(r'(\d+) .* analyzed', text).group(1)
missing_templates = int(re.search(r'\* (\d+) .* missing_conf_file', text).group(1))
after_pele_num = re.search(r'\* (\d+) .* correctly', text).group(1)

lines = text.splitlines()
store_mis_temp = False
missing_templates_simulations = []
store_failed = False
pele_failed_simulations = []
for l in lines[1:]:
    if 'missing conf file' in l:
        store_mis_temp = True
        store_failed = False
        continue
    elif 'The following systems have failed due to' in l:
        store_failed = True
        store_mis_temp = False
        continue
    if store_failed:
        sim = find_sim_id(l)
        if not sim:
            sys.exit("Talk with the developer")
        pele_failed_simulations.append(sim)
    elif store_mis_temp:
        sim = find_sim_id(l)
        if not sim:
            sys.exit("Talk with the developer")
        missing_templates_simulations.append(sim)
# The missing_templates_simulation and the pele_failed_simulations contain the ID of the simulations that have failed,
# for the first set it means that the template hasn't been generated, for the second is the PELE simulation what
# couldn't be carried out.

# TODO: finish the script with the numbers
